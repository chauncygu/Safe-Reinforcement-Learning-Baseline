<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.5//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_5.dtd'>
<nta>
	<declaration>/** 
Two changes have been made to this file.
   - minVelocityFront changed from -10 to -8
   - Code and guards have been added to shield the system.
   - The discrete simulation has been removed
   
Following  is the original header of the file. 
*/

/**
This case study has been published at "Correct System Design"
Symposium in Honor of Ernst-Rüdiger Olderog on the Occasion of
His 60th Birthday Oldenburg, Germany, September 8–9, 2015.

The paper "Safe and Optimal Adaptive Cruise Control" by 
Kim Guldstrand Larsen, Marius Mikucionis, Jakob Haahr Taankvist.

@incollection{cruise,
    year={2015},
    isbn={978-3-319-23505-9},
    booktitle={Correct System Design},
    volume={9360},
    series={Lecture Notes in Computer Science},
    editor={Meyer, Roland and Platzer, André and Wehrheim, Heike},
    doi={10.1007/978-3-319-23506-6_17},
    title={Safe and Optimal Adaptive Cruise Control},
    url={http://dx.doi.org/10.1007/978-3-319-23506-6_17},
    publisher={Springer International Publishing},
    author={Larsen, Kim Guldstrand and Miku\v{c}ionis, Marius and Taankvist, Jakob Haahr},
    pages={260-277},
    language={English}
}
*/

// Place global declarations here.
clock time;
const int maxVelocityEgo = 20;
const int maxVelocityFront = 20;
const int minVelocityEgo = -10;
const int minVelocityFront = -8;

const int maxSensorDistance = 200;

clock waitTimer;


int[-2,2] accelerationEgo;
broadcast chan chooseEgo;

int[-2,2] accelerationFront;
broadcast chan chooseFront;

broadcast chan update;

// Hybrid stuff
hybrid clock rVelocityEgo;
hybrid clock rVelocityFront;
hybrid clock rDistance = 10.0;
hybrid clock D;

/**
Post Shielding
*/

const string POSTSHIELD_NOTEBOOK_PATH = "%postshield_notebook_path%";
const string STRATEGY_PATH = "%strategy_for_postshield%";
const string SHIELD_PATH = "%shield_for_postshield%";
const string PKG_PROJECT_PATH = "%pkg_project_path%";

import "%libccpostshield_path%"
{
    int initialize_julia_context(const string&amp; postshield_notebook_path, const string&amp; strategy_path, const string&amp; shield_path, const string&amp; pkg_project_path);
    bool intervened(double v_ego, double v_front, double distance);
    int deterministic_shielded_strategy(double v_ego, double v_front, double distance);
    int nondeterministic_shielded_strategy(double v_ego, double v_front, double distance);
};

typedef struct {
    bool backwards;
    bool neutral;
    bool forwards;
} allowedActions;

allowedActions intToActions(int bitarray) {
    allowedActions result = { 
        (0 != (bitarray &amp; (1 &lt;&lt; 0))),
        (0 != (bitarray &amp; (1 &lt;&lt; 1))),
        (0 != (bitarray &amp; (1 &lt;&lt; 2)))
    };
    return result;
}

double clamp(double x, double lower, double upper) {
    if (x &lt; lower) {
        return lower;
    }
    
    if (x &gt; upper) {
        return upper;
    }
    
    return x;
}

allowedActions getAllowedActions(double v_ego, double v_front, double distance) {
    // UPPAAL has a habit of estimating the hybrid clocks to be slightly outside the allowed range. 
    // For example, it is possible to reach rVelocityFront = -8.0000034
    // which is outside the bounds of the shield and therefore allows any action.
    double v_ego2 = clamp(v_ego, minVelocityEgo, maxVelocityEgo);
    double v_front2 = clamp(v_front, minVelocityFront - 1, maxVelocityFront + 1); // Bug: guards do not account for odd velocity returning from sensor range
    // Furthermore, the distance can exceed the sensor range by quite a bit
    // in the moment where Front disappears. 
    // Only in the next time-step is it reduced to maxSensorDistance + 1.
    double distance2 = fmin(distance, maxSensorDistance + 1);
    
    int bitarray = deterministic_shielded_strategy(v_ego2, v_front2, distance2);
    if (bitarray == 0) {
        // Since the barbaric method is an under-approximation of behaviour
        // Red areas may sometimes be entered.
        // Yes, this is extremely interesting and worth examining further.
        return intToActions(1 + 2 + 4);
    }
    return intToActions(bitarray);
}

int outOfBounds = 0;
int noSafeActions = 0;
int safetyViolations = 0;

// Variant of getAllowedActions that mutate the state of some global variables.
// Such functions are not allowed for initialization.
allowedActions shieldingDebug(double v_ego, double v_front, double distance) {
    // UPPAAL has a habit of estimating the hybrid clocks to be slightly outside the allowed range. 
    // For example, it is possible to reach rVelocityFront = -8.0000034
    // which is outside the bounds of the shield and therefore allows any action.
    double v_ego2 = clamp(v_ego, minVelocityEgo, maxVelocityEgo);
    double v_front2 = clamp(v_front, minVelocityFront - 1, maxVelocityFront + 1); // Bug: guards do not account for odd velocity returning from sensor range
    // Furthermore, the distance can exceed the sensor range by quite a bit
    // in the moment where Front disappears. 
    // Only in the next time-step is it reduced to maxSensorDistance + 1.
    double distance2 = fmin(distance, maxSensorDistance + 1);
    
    int bitarray = deterministic_shielded_strategy(v_ego2, v_front2, distance2);
    
    if (bitarray == -1) {
        ++outOfBounds;
    }
    
    if (distance &lt;= 0) {
        ++safetyViolations;
    }
      
    if (bitarray == 0) {
        // Since the barbaric method is an under-approximation of behaviour
        // Red areas may sometimes be entered.
        // Yes, this is extremely interesting and worth examining further.
        
        ++noSafeActions;
        return intToActions(1 + 2 +4);
    }
    return intToActions(bitarray);
}

int initializedExitCode = initialize_julia_context(POSTSHIELD_NOTEBOOK_PATH, STRATEGY_PATH, SHIELD_PATH, PKG_PROJECT_PATH);

allowedActions allowed = getAllowedActions(0, 0, 10);

int interventions = 0;

void updateInterventions(double v_ego, double v_front, double distance) {
    if (intervened(v_ego, v_front, distance)) {
        ++interventions;
    }
}


/** Tested on CC 192 samples with G of 0.5.shield */
allowedActions debug1 = getAllowedActions(4, -9, 82);   //100
double distance2 = fmin(82, maxSensorDistance + 1);
double v_ego2 = clamp(4, minVelocityEgo, maxVelocityEgo);
double v_front2 = clamp(-9, minVelocityFront - 1, maxVelocityFront + 1);
/* */</declaration>
	<template>
		<name x="5" y="5">Ego</name>
		<location id="id0" x="86" y="51">
			<name x="119" y="42">Negative_acc</name>
		</location>
		<location id="id1" x="-204" y="-68">
			<name x="-272" y="-76">No_acc</name>
		</location>
		<location id="id2" x="-34" y="-68">
			<name x="-17" y="-76">Choose</name>
			<committed/>
		</location>
		<location id="id3" x="85" y="-187">
			<name x="75" y="-221">Positive_acc</name>
		</location>
		<init ref="id1"/>
		<transition id="id4">
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-510" y="0">rVelocityEgo == maxVelocityEgo &amp;&amp; allowed.forwards</label>
			<label kind="assignment" x="-493" y="59">accelerationEgo = 0</label>
			<nail x="-119" y="-8"/>
		</transition>
		<transition id="id5">
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-518" y="-17">rVelocityEgo == minVelocityEgo &amp;&amp; allowed.backwards</label>
			<label kind="assignment" x="-510" y="42">accelerationEgo = 0</label>
			<nail x="-119" y="-17"/>
		</transition>
		<transition id="id6">
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-59" y="34">chooseEgo?</label>
			<nail x="-8" y="25"/>
		</transition>
		<transition id="id7">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-59" y="-187">chooseEgo?</label>
			<nail x="-8" y="-161"/>
		</transition>
		<transition id="id8">
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-170" y="-119">chooseEgo?</label>
			<nail x="-119" y="-102"/>
		</transition>
		<transition id="id9">
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="76" y="-51">allowed.backwards &amp;&amp;
rVelocityEgo &gt; minVelocityEgo</label>
			<label kind="assignment" x="76" y="-17">accelerationEgo = -2</label>
			<nail x="59" y="-42"/>
		</transition>
		<transition id="id10">
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="85" y="-161">allowed.forwards &amp;&amp;
rVelocityEgo &lt; maxVelocityEgo</label>
			<label kind="assignment" x="85" y="-127">accelerationEgo = 2</label>
			<nail x="59" y="-102"/>
		</transition>
		<transition id="id11">
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-527" y="-34">allowed.neutral</label>
			<label kind="assignment" x="-527" y="25">accelerationEgo = 0</label>
			<nail x="-119" y="-25"/>
		</transition>
	</template>
	<template>
		<name>Front</name>
		<location id="id12" x="-340" y="-306">
			<name x="-331" y="-331">Faraway</name>
		</location>
		<location id="id13" x="102" y="-136">
			<name x="92" y="-170">Positive_acc</name>
		</location>
		<location id="id14" x="102" y="68">
			<name x="59" y="85">Negative_acc</name>
		</location>
		<location id="id15" x="-102" y="68">
			<name x="-153" y="85">No_acceleration</name>
		</location>
		<location id="id16" x="0" y="-34">
			<name x="17" y="-42">Choose</name>
			<committed/>
		</location>
		<location id="id17" x="-340" y="-238">
			<committed/>
		</location>
		<location id="id18" x="-340" y="-153">
			<committed/>
		</location>
		<branchpoint id="id19" x="-340" y="-195"/>
		<init ref="id15"/>
		<transition id="id20" controllable="false">
			<source ref="id18"/>
			<target ref="id12"/>
			<label kind="guard" x="-680" y="-178">rVelocityEgo &lt; minVelocityFront</label>
			<nail x="-416" y="-153"/>
			<nail x="-416" y="-306"/>
		</transition>
		<transition id="id21">
			<source ref="id19"/>
			<target ref="id12"/>
			<nail x="-374" y="-195"/>
			<nail x="-374" y="-306"/>
		</transition>
		<transition id="id22">
			<source ref="id19"/>
			<target ref="id18"/>
		</transition>
		<transition id="id23" controllable="false">
			<source ref="id17"/>
			<target ref="id19"/>
		</transition>
		<transition id="id24" controllable="false">
			<source ref="id14"/>
			<target ref="id12"/>
			<label kind="guard" x="-178" y="-323">rDistance &gt; maxSensorDistance</label>
			<label kind="synchronisation" x="-178" y="-306">update?</label>
			<label kind="assignment" x="-178" y="-289">rDistance = maxSensorDistance+1, accelerationFront = 0</label>
			<nail x="263" y="68"/>
			<nail x="263" y="-306"/>
		</transition>
		<transition id="id25" controllable="false">
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="guard" x="-204" y="-246">rDistance &gt; maxSensorDistance</label>
			<label kind="synchronisation" x="-204" y="-229">update?</label>
			<label kind="assignment" x="-204" y="-212">rDistance = maxSensorDistance+1,
accelerationFront = 0</label>
			<nail x="102" y="-229"/>
			<nail x="-204" y="-229"/>
			<nail x="-246" y="-280"/>
		</transition>
		<transition id="id26" controllable="false">
			<source ref="id15"/>
			<target ref="id12"/>
			<label kind="guard" x="-382" y="17">rDistance &gt; maxSensorDistance</label>
			<label kind="synchronisation" x="-382" y="34">update?</label>
			<label kind="assignment" x="-382" y="51">rDistance = maxSensorDistance+1,
accelerationFront = 0</label>
			<nail x="-391" y="68"/>
			<nail x="-391" y="-306"/>
		</transition>
		<transition id="id27" controllable="false">
			<source ref="id14"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-25" y="68">chooseFront?</label>
			<nail x="0" y="68"/>
		</transition>
		<transition id="id28" controllable="false">
			<source ref="id13"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-17" y="-153">chooseFront?</label>
			<nail x="0" y="-136"/>
		</transition>
		<transition id="id29" controllable="false">
			<source ref="id15"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-93" y="17">chooseFront?</label>
		</transition>
		<transition id="id30" controllable="false">
			<source ref="id16"/>
			<target ref="id14"/>
			<label kind="guard" x="25" y="8">rVelocityFront &gt; minVelocityFront</label>
			<label kind="assignment" x="25" y="25">accelerationFront = -2</label>
		</transition>
		<transition id="id31" controllable="false">
			<source ref="id16"/>
			<target ref="id13"/>
			<label kind="guard" x="25" y="-102">rVelocityFront &lt; maxVelocityFront</label>
			<label kind="assignment" x="25" y="-85">accelerationFront = 2</label>
		</transition>
		<transition id="id32" controllable="false">
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="assignment" x="-204" y="-8">accelerationFront = 0</label>
			<nail x="-102" y="-8"/>
		</transition>
		<transition id="id33" controllable="false">
			<source ref="id12"/>
			<target ref="id17"/>
			<label kind="synchronisation" x="-365" y="-280">chooseFront?</label>
		</transition>
		<transition id="id34" controllable="false">
			<source ref="id18"/>
			<target ref="id16"/>
			<label kind="select" x="-331" y="-136">i:int[minVelocityFront, maxVelocityFront]</label>
			<label kind="guard" x="-331" y="-119">i &lt;= rVelocityEgo</label>
			<label kind="assignment" x="-331" y="-102">rVelocityFront = i * 1.0,
rDistance = 1.0*maxSensorDistance</label>
			<nail x="-340" y="-34"/>
		</transition>
	</template>
	<template>
		<name>Monitor</name>
		<declaration>
double distanceRate(double velFront, double velEgo, double dist){
    if (dist &gt; maxSensorDistance)
        return 0.0;
    else 
        return velFront - velEgo;
}
</declaration>
		<location id="id35" x="-153" y="-144">
			<label kind="invariant" x="-315" y="-127">rVelocityEgo' == accelerationEgo &amp;&amp;
rVelocityFront' == accelerationFront &amp;&amp;
rDistance'  == distanceRate(rVelocityFront,rVelocityEgo, rDistance) &amp;&amp;
D' == rDistance</label>
		</location>
		<init ref="id35"/>
	</template>
	<template>
		<name>System</name>
		<location id="id36" x="-68" y="-238">
			<name x="-85" y="-272">Done</name>
			<urgent/>
		</location>
		<location id="id37" x="-238" y="-238">
			<name x="-272" y="-272">FrontNext</name>
			<urgent/>
		</location>
		<location id="id38" x="-238" y="-187">
			<name x="-255" y="-170">Wait</name>
			<label kind="invariant" x="-280" y="-153">waitTimer &lt;= 1</label>
		</location>
		<location id="id39" x="-408" y="-238">
			<name x="-433" y="-272">EgoNext</name>
			<urgent/>
		</location>
		<init ref="id39"/>
		<transition id="id40" controllable="false">
			<source ref="id38"/>
			<target ref="id39"/>
			<label kind="guard" x="-536" y="-144">waitTimer &gt;= 1</label>
			<label kind="assignment" x="-535" y="-127">allowed = shieldingDebug(rVelocityEgo, rVelocityFront, rDistance),
updateInterventions(rVelocityEgo, rVelocityFront, rDistance)</label>
			<nail x="-357" y="-144"/>
			<nail x="-536" y="-144"/>
			<nail x="-535" y="-238"/>
		</transition>
		<transition id="id41" controllable="false">
			<source ref="id36"/>
			<target ref="id38"/>
			<label kind="synchronisation" x="-144" y="-195">update!</label>
			<label kind="assignment" x="-144" y="-212">waitTimer = 0</label>
		</transition>
		<transition id="id42" controllable="false">
			<source ref="id37"/>
			<target ref="id36"/>
			<label kind="synchronisation" x="-204" y="-255">chooseFront!</label>
		</transition>
		<transition id="id43" controllable="false">
			<source ref="id39"/>
			<target ref="id37"/>
			<label kind="synchronisation" x="-365" y="-255">chooseEgo!</label>
		</transition>
	</template>
	<system>
system Ego, Front, System, Monitor;
    </system>
	<queries>
		<query>
			<formula>/* Due to a bug somewhere, this model cannot be run from the UI. Instead, call verifyta from the terminal. */</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=120;10] { rDistance, 0, 200 }</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=120;1000] (max: D/10000)</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=120;1000] (max: D/10000 + (rDistance &lt;= 0)*1000.0)</formula>
			<comment/>
		</query>
		<query>
			<formula>Pr[&lt;=120] (&lt;&gt; rDistance &lt; 0)</formula>
			<comment/>
		</query>
		<query>
			<formula>strategy DeathCosts1000 = minE (D/1000 + (rDistance &lt;= 0)*1000.0) [&lt;=120] {} -&gt; {rVelocityEgo, rVelocityFront, rDistance}: &lt;&gt; time &gt;= 120</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=120;10] { rDistance, 0, 200 }            under DeathCosts1000</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=120;1000] (max: D/1000)                           under DeathCosts1000</formula>
			<comment/>
		</query>
		<query>
			<formula>E[&lt;=120;1000] (max:(rDistance &lt;= 0))                  under DeathCosts1000</formula>
			<comment/>
		</query>
		<query>
			<formula>Pr[&lt;=120] (&lt;&gt; rDistance &lt;= 0)                         under DeathCosts1000</formula>
			<comment/>
		</query>
		<query>
			<formula>saveStrategy("/home/asger/Experiments/E1/DeathCosts1000.strategy.json", DeathCosts1000)</formula>
			<comment/>
		</query>
		<query>
			<formula>strategy DeathCosts1000 = loadStrategy {} -&gt; {rVelocityEgo, rVelocityFront, rDistance}("/home/asger/Experiments/E1/DeathCosts1000.strategy.json")</formula>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
	</queries>
</nta>
